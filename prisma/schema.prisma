datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
  binaryTargets= ["debian-openssl-1.1.x"]
}

model User {
  id               Int       @id
  name             String?
  login            String?   @unique
  html_url         String?   @unique
  avatar_url       String?
  email            String?   @unique
  twitter_username String?
  location         String?
  Post             Post[]
  Comment          Comment[]
  Like             Like[]
}

model Post {
  id       String    @id @default(uuid())
  title    String
  body     String
  permalink String? @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
  softDelete Boolean @default(false)
}

model Comment {
  id        String    @id @default(uuid())
  body   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  likes     Like[]
  softDelete Boolean @default(false)
}

model Like {
  id        String    @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  postId    String?
  post      Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
}