<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Navigation API demo 1</title>
    <style is:global>
      .spinner {
        width: 40px;
        height: 40px;
        border-radius: 100%;
        border: 5px solid #ccc;
        border-top-color: #333;
        animation: spinner 0.8s infinite linear;
      }

      .dark {
        border: 10px solid #333;
        border-top-color: #c06;
      }

      @keyframes spinner {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <div id="message">
      <h1>Click the link below to load the page.</h1>
      <p>Nothing is happening yet...</p>
    </div>
    <a id="link">Click me!</a>
    <button id="navigate">Navigate</button>
    <button id="force-error">Force an error: false</button>
    <button id="abort" style="display: none;">Stop</button>
    <script>
      const message = document.querySelector("#message")
      const abort = document.querySelector("#abort") as HTMLButtonElement
      const link = document.querySelector("#link") as HTMLAnchorElement
      const navigateBtn = document.querySelector(
        "#navigate"
      ) as HTMLButtonElement
      const forceError = document.querySelector(
        "#force-error"
      ) as HTMLButtonElement

      let error = false // Initial value for the error button

      link.href = window.location.href // Setting the link's URL to the current page

      abort?.addEventListener("click", () => {
        // This triggers the abort event on the signal
        window.stop()
        abort.style.display = "none"
      })

      forceError?.addEventListener("click", () => {
        // To show that your error handling can be separated from the abort signal
        error = !error
        forceError.innerHTML = `Force an error: ${error}`
      })

      navigateBtn.addEventListener("click", async () => {
        if (!message) return

        // @ts-ignore
        const { committed, finished } = navigation.navigate(link.href)
        // The navigate function returns two promises
        // The first one is resolved at the beginning of the navigation
        // The second one is resolved when the navigation is finished
        // In between, we set up our loading state until the finished promise is resolved

        console.log(
          "this log is right before we await the 'committed' promise-- as far as I can tell, this is kind of like doing something on the 'beforeunload' event except for local navigation"
        )
        console.log("Committed: ", await committed)

        message.innerHTML = "<h3>Different loading screen...</h3>"
        addSpinner("dark")

        try {
          if (error) throw new Error("Error: YOU DID THIS")
          console.log("Finished: ", await finished)
        } catch (e) {
          if (e instanceof DOMException) return
          console.log(e)
          message.innerHTML = `<h1>${(e as Error).message}</h1>`
        }
      })

      //@ts-ignore
      navigation.addEventListener("navigate", navigationHandler)

      // We can do a global error listener, but it's overrules the error listener in the handler function
      // This would be best for something like a global 404 page
      // navigation.addEventListener("navigateerror", (e) => {
      //   document.body.textContent = `Could not load ${location.href}: ${e.message}`
      // })

      function navigationHandler(event: any) {
        if (!message) return
        const signal = event.signal

        signal.onabort = () => {
          console.log(
            "This log is coming from the 'onabort' event that is fired by the abort signal. You can do anything you want in this function-- including updating the DOM. I just chose to use the catch block to show you all your options."
          )
        }

        event.intercept({
          async handler() {
            message.innerHTML = "<h1>The page is loading...</h1>"
            !error ? (abort.style.display = "block") : null
            addSpinner()
            try {
              await delay(3000, { signal })
            } catch (error) {
              console.log(signal)
              signal.aborted
                ? (message.innerHTML = `<h1>${signal.reason}</h1>
              <h4>You can click the link again if you want</h4>`)
                : (message.innerHTML = `<h1>${(error as Error).message}</h1>`)
              return
            }
            message.innerHTML = `<h1>Page loaded! You can click the link again.</h1`
            abort.style.display = "none"
          },
        })
      }

      // I stole the meat of this function from https://gigantic-honored-octagon.glitch.me/
      // Thanks to the Google Chrome team
      function delay(ms: number, { signal = null } = {}) {
        // @ts-ignore
        signal?.throwIfAborted()
        return new Promise((resolve, reject) => {
          const id = setTimeout(resolve, ms)

          error && reject(new Error("Error: ALL YOUR FAULT"))

          // @ts-ignore
          signal.addEventListener("abort", () => {
            clearTimeout(id)
            reject(new DOMException("Aborted", "AbortError"))
          })
        })
      }

      function addSpinner(style?: string) {
        const spinner = document.createElement("div")
        spinner.classList.add("spinner")
        style && spinner.classList.add(style)
        message?.appendChild(spinner)
      }
    </script>
  </body>
</html>
