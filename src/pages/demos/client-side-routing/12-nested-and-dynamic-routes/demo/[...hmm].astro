<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tell me this isn't a SPA</title>
  </head>
  <style>
    body {
      position: absolute; /* only need to do this because of the navbar and footer */
      overflow: hidden; /* since footer is absolute, we will need a scrollbar inside */
      width: 100%; /* take up the entire screen */
      height: 100%; /* ditto */
      margin: 0; /* no margins to avoid blank area around the edges */
      padding: 0; /* no need */
      display: flex; /* flexbox makes life easy */
      flex-direction: column; /* vertical layout */
      justify-content: center; /* center everything */
      align-items: center; /* ditto */
      text-align: center; /* ditto */
    } /* this is the container that will hold everything */

    .dark {
      background-color: #222; /* DARK theme (1) */
      color: #fff; /* white text */
    }
    .dark a {
      color: #88f; /* purple links */
    } /* theme 1 (DARK) */

    .purple {
      background-color: #88f; /* PURPLE theme (2) */
      color: #ff0; /* yellow text */
    }
    .purple a {
      color: #292; /* green links */
    } /* theme 2 (PURPLE) */

    .green {
      background-color: #0f0; /* GREEN theme (3) */
      color: #911; /* red text */
    }
    .green a {
      color: #999; /* gray links */
    } /* theme 3 (GREEN) */

    nav,
    footer {
      width: 100%;
      position: absolute;
      background-color: #222; /* keep nav and footer dark */
    } /* take up whole screen at the top and bottom */

    nav {
      top: 0;
    } /* nav on top */

    ul {
      display: flex;
      justify-content: space-evenly;
      align-items: center;
      list-style: none;
    } /* make the nav into a horizontal, evenly spaced list */

    main {
      width: 100%; /* take up the whole screen */
      overflow-y: auto; /* scrollable */
      margin-top: 3rem; /* leave room for the navbar */
      margin-bottom: 1rem; /* leave room for the footer */
    }

    img {
      aspect-ratio: 1/1; /* square-ish */
      object-fit: contain; /* scale to fit */
      width: 100%; /* take up the whole area if you can */
      max-height: 50vh; /* but not too big */
    }

    footer {
      bottom: 0; /* starting at bottom */
    }
  </style>
  <body class="dark">
    <nav>
      <ul>
        <li>
          <a href="/" class="Link">Home</a>
        </li>
        <li>
          <a href="/about" class="Link">About</a>
        </li>
        <li>
          <a href="/products" class="Link">Products</a>
        </li>
        <li>
          <a href="/cart" class="Link">Cart</a>
          <span id="cart-count"></span>
          <span id="cart-total"></span>
        </li>
        <li>
          <input
            aria-label="Search"
            type="text"
            placeholder="Search"
            id="search"
          />
        </li>
        <li>
          <button id="toggleTheme">Toggle Theme</button>
        </li>
      </ul>
    </nav>
    <main class="main"></main>
    <footer>
      <a href="http://jazzypants.dev"> Â© 2023 Jovial Penguin, LLC.</a>
    </footer>
    <script defer>
      const toggleTheme = document.getElementById("toggleTheme")
      // Get the toggleTheme button, which will be used to change the theme of the app
      const main = document.querySelector(".main")
      // Get the main element, which will be used to render the dynamic content
      const links = document.querySelectorAll(".Link")
      // Instead of targeting every <a> tag, we only target internal navigation links
      let products = {}
      // An initial empty object for us to cache our products in

      // "Database" of products
      const db = async () => {
        // This has to be async because we're using fetch
        const response = await fetch("/db.json") // Get the db.json file
        const data = await response.json() // Parse the JSON
        console.log("Initial DB fetch")
        return data // Return the data
      }

      const getProducts = async () => {
        // This has to be async because we're using fetch
        if (products.length > 0) {
          console.log("Products have been cached")
          return products // If we've already fetched the products, return them
        }
        console.log("Products are being fetched")
        const data = await db() // Get the data from the db
        products = data.products // Set the empty object to the products in the db
        return products // Return the products
      }

      toggleTheme.addEventListener("click", () => {
        // this is still extremely ugly, but it works for now
        if (document.body.classList.contains("dark")) {
          document.body.classList.remove("dark")
          document.body.classList.add("purple")
        } else if (document.body.classList.contains("purple")) {
          document.body.classList.remove("purple")
          document.body.classList.add("green")
        } else if (document.body.classList.contains("green")) {
          document.body.classList.remove("green")
          document.body.classList.add("dark")
        }
      })

      // Almost all of our final components
      const Home = () => {
        console.log("Home component is rendering")
        document.title = "Home" // Set the page title
        render(`
            <p>This is a totally real shop! See! That's a picture! Of a shop! Totally
          open.</p>
          <img src="/diana.avif" alt="Check us out" />
            `)
      } // Hmm, this looks familiar.

      const About = () => {
        console.log("About component is rendering")
        document.title = "About"
        render(`
            <h1>About</h1>
          <p>
            This is a totally real shop that sells totally real products. It's not a
            demonstration of how client-side routing works. Noo! It's just a
            shop.
          </p>
            `)
      } // It's a functional component!

      const ProductComponent = (product) => {
        console.log("A product is rendering")
        return `
            <div class="product">
              <a href=/product/${product.id} class="Link">
                <img src="${product.image}" alt="${product.name}" />
              <h2>${product.name}</h2>
              </a>
              <p>${product.description}</p>
              <p>$${product.price}</p>
              <button class="add-to-cart" id="${product.id}">Add to cart</button>
            </div>
            `
      } // Oh look, we're passing props now.

      const ProductsPage = async () => {
        console.log("Products component is rendering")
        document.title = "Products"
        const products = await getProducts() // Get the products
        const productsHTML = Object.values(products)
          .map((product) => ProductComponent(product))
          .join("") // Map over the products and render each one
        render(productsHTML) // Render the products
      }

      const ProductPage = async (id) => {
        console.log(
          `The ProductPage component is rendering product with ID: ${id}`
        )
        await getProducts() // Get the products
        const product = products.find((product) => product.id === Number(id)) // Find the product that matches the id
        if (!product) {
          return Nope(id)
        }
        document.title = product.name // Set the page title to the product name
        search.value = product.name // Set the search input value to the product name
        product ? render(ProductComponent(product)) : Nope(id) // If we find a product, render it. If not, render the 404 page.
      }

      const Nope = (id) => {
        console.log(`404 Component just rendered on ${location.pathname}`)
        console.log(`ID detected: ${!!id}`) // The double bang is just a fancy way of converting the id to a boolean. If there's an id, it'll be true. If there isn't, it'll be false.
        if (id) {
          render(
            `<h1>404</h1><h2>Sorry buddy, but I don't think we have a product with id #${id}!</h2>`
          )
        } else {
          render(`<div>
              <h1>404</h1>
              <h2>Huh, you're at ${location.pathname}, but you really shouldn't be... ðŸ¤” </h2>
            </div>`)
        }
      } // Only on v1 of this project, and I already have 2 404 pages... I think that's a good sign?

      const Routes = [
        { path: "/", component: Home },
        { path: "/about", component: About },
        { path: "/products", component: ProductsPage },
        { path: "/product", component: ProductPage },
        { path: "/cart", component: () => render("Cart") },
      ]

      const Router = (potentialRoute) => {
        const dynamicRoute = "product" // Define a dynamic route
        if (
          // We're turning the path into an array by splitting it every time we see a slash.
          potentialRoute.split("/")[1] === dynamicRoute &&
          // Then we're checking to see if the second item is our dynamic route.
          potentialRoute.split("/")[2]
          // Finally, we're making sure there is an id in the third item.
        ) {
          console.log("Dynamic route detected")
          const id = potentialRoute.split("/")[2]
          // If there is a third item, we're setting it to the id variable.
          return ProductPage(id)
          // Then we're calling the ProductPage function and passing it the id.
        } else {
          console.log("Static route detected")
          const route = Routes.find((route) => route.path === potentialRoute)
          route ? route.component() : Nope()
        }
      }

      function render(component) {
        console.log(`The render function just ran with ${component}`)
        // Since we only have one dynamic element on the page and very content in common between pages,
        main.innerHTML = component
        // We can just replace the entire innerHTML of the main element
        linkFinder()
        // And then run the linkFinder function to add event listeners to our links
      }

      // Essential to any routed SPA, our linkFinder function will run every time we render a component. It will find all the links in the component, and add event listeners to them. When the user clicks a link, it will prevent the default behavior of the link (which is to navigate to a new page), and instead run the Router function with the path of the link as the argument.
      function linkFinder() {
        const links = document.querySelectorAll(".Link") // instead of targeting every anchor tag, we only target the ones meant for navigating around our app.
        links.forEach((link) => {
          if (link.alreadyHasEventListener) return // This is so that we don't add multiple event listeners to the same link.
          link.alreadyHasEventListener = true
          console.log(`Changing link behavior of ${link}`)
          // Target each link that we have marked with the Link class,
          link.addEventListener("click", (e) => {
            // add a click event listener
            e.preventDefault() // prevent the default behavior of the anchor tag (opening a new page)
            const linkPath = link.getAttribute("href") // get the href attribute of the link (the path)
            history.pushState(null, null, linkPath) // push the link's path to the history object
            Router(linkPath) // call the Router function with the link's path
          }) // Ta-da! We have a SPA! Oh, wait. We need to call the Router function once to render the initial page.
        })
      }

      // Oh, wait. We need to call the Router function once to render the initial page.

      Router(location.pathname)

      // Now, we need to add a listener for the popstate event.

      window.addEventListener("load", () => {
        window.addEventListener("popstate", () => {
          Router(location.pathname)
        })
      })
    </script>
  </body>
</html>
