<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JavaScript Call Stack and Task Queue Interactive Demo</title>
    <style>
      body {
        background-color: #a55588;
      }

      .header {
        background-color: #226;
        color: white;
        text-align: center;
        padding: 10px 0;
        font-size: larger;
      }

      .header textarea {
        width: 80%;
        height: 150px;
        margin-top: 15px;
        border-radius: 8px;
        padding: 10px;
        font-family: monospace;
        background-color: #2a1b3d;
      }

      .header button {
        cursor: pointer;
        padding: 10px 15px;
        border-radius: 5px;
        background-color: #4c0ff0;
        transition: all 0.3s ease-in-out;
      }

      .header button:hover {
        background-color: #3b0dd0;
        box-shadow: 0 4px 8px 2px rgba(0, 0, 100, 0.2);
      }

      .header input {
        width: 75px;
        text-align: center;
        border-radius: 5px;
        border: 1px solid #4c0ff0;
        background-color: #2a1b3d;
        color: white;
        font-family: monospace;
      }

      .container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 15px;
        padding: 20px;
      }

      .section {
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        overflow-y: auto;
      }

      .section h2 {
        margin-top: 0;
        text-align: center;
        font-size: 20px;
        color: #303;
      }

      .controls {
        text-align: center;
        margin-top: 15px;
      }

      .callStack {
        background-color: #dde5d9;
        border-left: 6px solid #ff7e67;
      }

      .taskQueue {
        background-color: #e0f4dd;
        border-left: 6px solid #69c0ff;
      }

      .consoleLog {
        background-color: #e8dde5;
        border-left: 6px solid #99ff9e;
      }

      .content {
        font-size: 14px;
        height: 350px;
        overflow-y: auto;
      }
    </style>
  </head>
  <body>
    <div class="header">
      <h1>JavaScript Call Stack and Task Queue Interactive Demo</h1>
      <div class="controls">
        <button id="run">Run</button>
        <button id="step">Step</button>
        <input type="number" id="delay" value="500" />
        <label for="speed">ms</label>
        <button id="reset">Reset</button>
      </div>
      <textarea id="code"
        >setTimeout(() => console.log("Hello"), 1000)
      </textarea>
    </div>
    <div class="container">
      <div class="section callStack">
        <h2><span class="icon">&#x1F9F0;</span> Call Stack</h2>
        <div id="callStack" class="content"></div>
      </div>
      <div class="section taskQueue">
        <h2><span class="icon">&#x23F0;</span> Task Queue</h2>
        <div id="taskQueue" class="content"></div>
      </div>
      <div class="section consoleLog">
        <h2><span class="icon">&#x1F4BB;</span> Console Log</h2>
        <div id="consoleLog" class="content"></div>
      </div>
    </div>
    <script>
      const runButton = document.getElementById("run")
      const resetButton = document.getElementById("reset")
      const codeArea = document.getElementById("code")
      const callStackDiv = document.getElementById("callStack")
      const taskQueueDiv = document.getElementById("taskQueue")
      const consoleLogDiv = document.getElementById("consoleLog")

      let callStack = []
      let taskQueue = []
      let consoleLog = []
      let timeoutId = 0
      let timeouts = {}

      function updateUI() {
        callStackDiv.innerHTML = callStack
          .map((item) => `<div>${item}</div>`)
          .join("")
        taskQueueDiv.innerHTML = taskQueue
          .map((item) => {
            let itemHTML = `setTimeout(${item.delay}ms): ${item.code}`
            return item.active
              ? `<div style="background-color: yellow;">${itemHTML}</div>`
              : `<div>${itemHTML}</div>`
          })
          .join("")
        consoleLogDiv.innerText = consoleLog.join("\n")
      }

      function logToConsole(message) {
        consoleLog.push(`Console: ${message}`)
        updateUI()
      }

      function resetState() {
        callStack = []
        taskQueue = []
        consoleLog = []
        timeoutId = 0
        timeouts = {}
        updateUI()
      }

      // Mock setTimeout
      window.originalSetTimeout = window.setTimeout
      window.setTimeout = function (callback, delay) {
        let id = ++timeoutId
        let callbackStr = callback.toString()
        timeouts[id] = { callback: callback, delay: delay }
        taskQueue.push({
          id: id,
          code: callbackStr,
          delay: delay,
          active: false,
        })
        updateUI()

        window.originalSetTimeout(() => {
          let timeout = timeouts[id]
          if (timeout) {
            delete timeouts[id]
            taskQueue = taskQueue.map((item) =>
              item.id === id ? { ...item, active: true } : item
            )
            updateUI()
            callStack.push(`Executing: ${callbackStr}`)
            updateUI()
            try {
              timeout.callback()
            } catch (e) {
              logToConsole(`Error in setTimeout: ${e.message}`)
            }
            callStack.pop()
            taskQueue = taskQueue.filter((item) => item.id !== id)
            updateUI()
          }
        }, delay)
      }

      function executeScript() {
        try {
          eval(codeArea.value)
        } catch (e) {
          logToConsole(`Error: ${e.message}`)
        }
      }

      runButton.addEventListener("click", executeScript)
      resetButton.addEventListener("click", resetState)

      // Overriding console.log
      console.log = logToConsole

      codeArea.value = `console.log('Starting test...');

setTimeout(() => {
  console.log('First level of setTimeout');
  
  setTimeout(() => {
    console.log('Second level of setTimeout');
    
    setTimeout(() => {
      console.log('Third level of setTimeout');
    }, 1000);

    console.log('Exiting second level...');
  }, 2000);

  console.log('Exiting first level...');
}, 3000);

console.log('Test script end.');
`
    </script>
  </body>
</html>
