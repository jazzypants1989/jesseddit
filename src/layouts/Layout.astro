---
export interface Props {
  title?: string
  now: string
  others: Array<string>
}

import Nav from "../components/Nav.astro"

import "../styles/global.css"

const { title = "Jessedit", now, others } = Astro.props

const url = new URL(Astro.url)
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Heebo:wght@300;400;500;600&display=swap"
  rel="stylesheet"
/>
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />
<!-- Meta image: "/pengy.png" -->
<meta property="og:image" content="/pengy.png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content="Jovial Penguin, LLC" />
<meta property="og:type" content="website" />
<meta property="og:site_name" content="Jessedit" />
<meta property="og:title" content={title} />
<meta property="og:description" content="Jessedit" />
<meta property="og:url" content="https://jessedit.tech/blog/into-the-future" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@jesse_pence5" />
<meta name="twitter:creator" content="@jesse_pence5" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content="Jessedit" />
<meta name="twitter:image" content="/pengy.png" />
<meta name="twitter:image:alt" content="Jovial Penguin, LLC" />
<meta name="twitter:url" content="https://jessedit.tech/blog/into-the-future" />
<meta name="twitter:label1" content="Est. reading time" />
<meta name="twitter:data1" content="5-3000 minutes" />
<title>{title}</title>
<body
  class="scroll-behavior-smooth max-w-full overflow-x-hidden bg-purple-300 text-lg tracking-wide text-purple-900 antialiased dark:bg-purple-800 dark:text-purple-200"
>
  <nav
    class="fixed z-10 m-4 mt-0 h-16 w-min animate-float-slow flex-col flex-wrap items-center justify-between overflow-hidden rounded-b-3xl border-b-2 border-purple-800 border-transparent bg-purple-400 p-4 tracking-wide opacity-40 shadow-2xl shadow-slate-500 transition-all duration-500 hover:h-max hover:animate-nudge-y hover:border-solid hover:opacity-100"
  >
    <Nav now={now} others={others} />
  </nav>
  <img
    src="/default.png"
    class="ml-auto mr-4 block h-24 w-24 rounded-full border-transparent bg-purple-300 px-2 tracking-wide opacity-30 shadow-2xl shadow-blue-500 transition-all duration-500 hover:opacity-100 focus:outline-none"
  />
  <slot />
  <button
    id="theme-toggle"
    class="fixed bottom-0 right-0 m-4 animate-float-slow rounded-full border-purple-800 border-transparent bg-purple-400 p-2 tracking-wide text-purple-900 opacity-30 shadow-2xl shadow-slate-500 transition-all duration-500 hover:animate-nudge-y hover:border-solid hover:bg-purple-500 hover:opacity-100 focus:outline-none"
  >
  </button>
  <footer
    class="fixed bottom-4 left-2 animate-float-slow cursor-crosshair rounded-full border-blue-800 bg-purple-400 p-2 text-sm tracking-wide text-purple-900 opacity-30 shadow-2xl shadow-slate-500 transition-all duration-1000 ease-in-out hover:scale-90 hover:opacity-100"
  >
    <p class="text-center text-purple-900">Jovial Penguin, LLC Â© 2023</p>
  </footer>
</body>

<script>
  // Get the user's preferred theme
  const theme = localStorage.getItem("theme")

  // Get the theme toggle button
  const themeToggle = document.getElementById("theme-toggle")

  // Add a click listener to the toggle button
  themeToggle?.addEventListener("click", toggleTheme)

  // If the user has previously selected a theme, or if their
  // preferred theme is dark, then set the theme to dark
  if (
    theme === "dark" ||
    (!("theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    document.documentElement.classList.add("dark")
    themeToggle ? (themeToggle.textContent = "ðŸŒž") : null
    themeToggle?.setAttribute("aria-label", "Switch to light mode")
  } else {
    // Otherwise, set the theme to light
    document.documentElement.classList.remove("dark")
    themeToggle ? (themeToggle.textContent = "ðŸŒ™") : null
    themeToggle?.setAttribute("aria-label", "Switch to dark mode")
  }

  function toggleTheme() {
    // If the current theme is dark...
    if (document.documentElement.classList.contains("dark")) {
      // ... then switch to light
      localStorage.setItem("theme", "light")
      document.documentElement.classList.remove("dark")
      themeToggle ? (themeToggle.textContent = "ðŸŒ™") : null
      themeToggle?.setAttribute("aria-label", "Switch to dark mode")
    } else {
      // Otherwise, switch to dark
      localStorage.setItem("theme", "dark")
      document.documentElement.classList.add("dark")
      themeToggle ? (themeToggle.textContent = "ðŸŒž") : null
      themeToggle?.setAttribute("aria-label", "Switch to light mode")
    }
  }
</script>
